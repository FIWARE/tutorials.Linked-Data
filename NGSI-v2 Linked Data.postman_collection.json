{
	"info": {
		"_postman_id": "16121a01-e085-4afd-8689-fea63a0d7246",
		"name": "NGSI-v2 Linked Data",
		"description": "This tutorial introduces the idea of using an existing **NGSI-v2** Context Broker as a Context Source within an\n**NGSI-LD** data space, and how to combine both JSON-based and JSON-LD based context data into a unified structure\nthrough introducing a simple **NGSI-LD** façade pattern with a fixed `@context`. The tutorial re-uses the data from the\noriginal **NGSI-v2** getting started tutorial but uses API calls from the **NGSI-LD** interface.\n\n\n> This tutorial is designed for exisiting **NGSI-v2** developers looking to attach existing **NGSI-v2** systems to an\n> **NGSI-LD** federation. If you are building a linked data system from scratch you should start from the beginnning of\n> the [NGSI-LD developers tutorial](https://ngsi-ld-tutorials.readthedocs.io/) documentation.\n>\n> Similarly, if you an existing **NGSI-v2** developer and you just want to understand linked data concepts in general,\n> checkout the equivalent [**NGSI-v2** tutorial](https://github.com/FIWARE/tutorials.Linked-Data/tree/NGSI-v2) on\n> upgrading **NGSI-v2** data sources to **NGSI-LD**\n\n## Contents\n\n# Adding Linked Data concepts to FIWARE Data Entities.\n\n> “Always be a first rate version of yourself and not a second rate version of someone else.”\n>\n> ― Judy Garland\n\nThe first introduction to FIWARE [Getting Started tutorial](https://github.com/FIWARE/tutorials.Getting-Started)\nintroduced the [NGSI v2](https://fiware.github.io/specifications/OpenAPI/ngsiv2) JSON-based interface that is commonly\nused to create and manipulate context data entities.\n[NGSI-LD](https://forge.etsi.org/swagger/ui/?url=https://forge.etsi.org/rep/NGSI-LD/NGSI-LD/raw/master/spec/updated/generated/full_api.json)\nis an evolution of that interface which enhances context data entities through adding the concept of **linked data**.\n\nThere is a need for two separate interfaces since:\n\n-   **NGSI-v2** offers [JSON](https://www.json.org/json-en.html) based interoperability used in individual Smart Systems\n-   **NGSI-LD** offers [JSON-LD](https://json-ld.org/) based interoperability used for Federations and Data Spaces\n\n**NGSI-v2** is ideal for creating individual applications offering interoperable interfaces for web services or IoT\ndevices. It is easier to understand than NGSI-LD and does not require a JSON-LD `@context`, However **NGSI-v2** without\nlinked data falls short when attempting to offer federated data across a data space. Once multiple apps and\norganisations are involved each individual data owner is no longer in control of the structure of the data used\ninternally by the other participants within the data space. This is where the `@context` of **NGSI-LD** comes in, acting\nas a mapping mechanism for attributes allowing the each local system to continue to use its own preferred terminology\nwithin the data it holds and for federated data from other users within the data space to be renamed using a standard\nexpansion/compaction operation allowing each individual system understand data holistically from across the whole data\nspace.\n\n## Creating a common data space\n\nFor example, imagine a simple \"Buildings\" data space consisting of two participants pooling their data together:\n\n-   Details of a series of [supermarkets](https://fiware-tutorials.readthedocs.io/en/latest/) from the **NGSI-v2**\n    tutorials.\n-   Details of a series of [farms](https://ngsi-ld-tutorials.readthedocs.io/en/latest/) from the **NGSI-LD** tutorials.\n\nAlthough the two participants have agreed to use a common\n[data model](https://ngsi-ld-tutorials.readthedocs.io/en/latest/datamodels.html#building) between them, internally they\nhold their data in a slightly different structure.\n\n#### Farm (**NGSI-LD** Data)\n\nWithin the **NGSI-LD** Smart Farm, all of the Building Entities are marked using `\"type\":\"Building\"` as a shortname\nwhich can be expanded to a full URI https://uri.fiware.org/ns/dataModels#Building` using JSON-LD expansion rules. All\nthe attributes of each Building entity (such as `name`, `category` etc are defined using the\n[User `@context`](./data-models/ngsi-context.jsonld) and are structured as NGSI-LD attributes. The standard NGSI-LD\nKeywords are used to define the nature of each attribute - e.g. `Property`, `GeoProperty`, `VocabularyProperty`,\n`Relationship` and each of these terms is also defined within the\n[core `@context`](https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context-v1.8.jsonld).\n\n```\n{\n    \"id\": \"urn:ngsi-ld:Building:farm001\",\n    \"type\": \"Building\",\n    \"category\": {\n        \"type\": \"VocabularyProperty\",\n        \"vocab\": \"farm\"\n    },\n    \"address\": {\n        \"type\": \"Property\",\n        \"value\": {\n            \"streetAddress\": \"Großer Stern 1\",\n            \"addressRegion\": \"Berlin\",\n            \"addressLocality\": \"Tiergarten\",\n            \"postalCode\": \"10557\"\n        }\n    },\n    \"location\": {\n        \"type\": \"GeoProperty\",\n        \"value\": {\n            \"type\": \"Point\",\n            \"coordinates\": [13.3505, 52.5144]\n        }\n    },\n    \"name\": {\n        \"type\": \"Property\",\n        \"value\": \"Victory Farm\"\n    },\n    \"owner\": {\n        \"type\": \"Relationship\",\n        \"object\": \"urn:ngsi-ld:Person:person001\"\n    }\n}\n```\n\n#### Supermarket (**NGSI-v2** Data)\n\nWithin the **NGSI-v2** Smart Supermarket, every entity must have a `id` and `type` - this is part of the data model and\na prerequisite for joining the data space. However due to the backend systems used, the internal short name is\n`\"type\":\"Store\"`. Within an **NGSI-v2** system there is no concept of `@context` - every attribute has a `type` and a\n`value` and the attribute `type` is usually aligned with the datatype (e.g. `Text`, `PostalAddress`) although since\n**NGSI-LD** keyword types such as `Relationship`, `VocabularyProperty` are also permissible and set by convention.\n\n```\n{\n    \"id\": \"urn:ngsi-ld:Store:001\",\n    \"type\": \"Store\",\n    \"address\": {\n        \"type\": \"PostalAddress\",\n        \"value\": {\n            \"streetAddress\": \"Bornholmer Straße 65\",\n            \"addressRegion\": \"Berlin\",\n            \"addressLocality\": \"Prenzlauer Berg\",\n            \"postalCode\": \"10439\"\n        }\n    },\n    \"category\": {\n        \"type\": \"VocabularyProperty\",\n        \"value\": \"supermarket\"\n    },\n    \"location\": {\n        \"type\": \"geo:json\",\n        \"value\": {\n            \"type\": \"Point\",\n            \"coordinates\": [13.3986, 52.5547]\n        }\n    },\n    \"name\": {\n        \"type\": \"Text\",\n        \"value\": \"Bösebrücke Einkauf\"\n    },\n    \"owner\": {\n        \"type\": \"Relationship\",\n        \"value\": \"urn:ngsi-ld:Person:person001\"\n    }\n}\n```\n\n### Types of data space\n\nWhen joining a data space, a participant must abide by the rules that govern that data space. One of the first decisions\na common data space must make is to defined the nature of the data space itself. There are three primary approaches to\nthis, which can broadly be defined as follows:\n\n-   An **Integrated** data space requires that every participant uses exactly the same payloads and infrastructure - for\n    example _\"Use Scorpio 4.1.15 only\"_ . This could be a requirement for a lottery ticketing system where every\n    terminal sends ticket data in the same format.\n-   A **unified** data space defines a common data format, but allows for the underlying infrastructure to differ\n    between participants - for example _\"Use NGSI-LD only for all payloads\"_\n-   A **federated** data space is even looser and defines a common meta structure so each participants has more\n    flexibility regarding it underlying technologies for example \"All payloads must be translatable as GeoJSON\"\\_ for a\n    combined GIS, NGSI-LD data space.\n\nUsing this terminology, in this example we are creating a **unified** data space in this example, since participants are\nusing NGSI-LD in common for data exchange, but their underlying systems are different.\n\n# Prerequisites\n\n## Docker\n\nTo keep things simple all components will be run using [Docker](https://www.docker.com). **Docker** is a container\ntechnology which allows to different components isolated into their respective environments.\n\n-   To install Docker on Windows follow the instructions [here](https://docs.docker.com/docker-for-windows/)\n-   To install Docker on Mac follow the instructions [here](https://docs.docker.com/docker-for-mac/)\n-   To install Docker on Linux follow the instructions [here](https://docs.docker.com/install/)\n\n**Docker Compose** is a tool for defining and running multi-container Docker applications. A\n[YAML file](https://raw.githubusercontent.com/Fiware/tutorials.Linked-Data/master/docker-compose/orion-ld.yml) is used\nconfigure the required services for the application. This means all container services can be brought up in a single\ncommand. Docker Compose is installed by default as part of Docker for Windows and Docker for Mac, however Linux users\nwill need to follow the instructions found [here](https://docs.docker.com/compose/install/)\n\n# Architecture\n\nThe demo application will send and receive NGSI-LD calls within a data space. This demo application will only make use\nof three FIWARE components.\n\nCurrently, both Orion and Orion-LD Context Brokers rely on open source [MongoDB](https://www.mongodb.com/) technology to\nkeep persistence of the context data they hold. Therefore, the architecture will consist of two elements:\n\n-   The [Smart Farm Context Broker](https://fiware-orion.readthedocs.io/en/latest/) which will receive requests using\n    [NGSI-LD](https://forge.etsi.org/swagger/ui/?url=https://forge.etsi.org/rep/NGSI-LD/NGSI-LD/raw/master/spec/updated/generated/full_api.json)\n-   The [Smart Supermarket Context Broker](https://fiware-orion.readthedocs.io/en/latest/) which will receive requests\n    using\n    [NGSI-v2](https://forge.etsi.org/swagger/ui/?url=https://forge.etsi.org/rep/NGSI-LD/NGSI-LD/raw/master/spec/updated/generated/full_api.json)\n-   Two instances of underlying [MongoDB](https://www.mongodb.com/) database\n    -   Used by both NGSI-v2 and NGSI-LD Context Brokers to hold context data information such as data entities,\n        subscriptions and registrations\n-   The FIWARE [Lepus](https://github.com/jason-fox/lepus) proxy which will translate NGSI-LD to NGSI-v2 and vice-versa\n-   An HTTP **Web-Server** which offers static `@context` files defining the context entities within the system.\n\nSince all interactions between the two elements are initiated by HTTP requests, the elements can be containerized and\nrun from exposed ports.\n\n![](https://fiware.github.io/tutorials.Linked-Data/img/architecture-lepus.png)\n\nThe necessary configuration information can be seen in the services section of the associated `common.yml` and\n`orion-ld.yml` files:\n\n#### Orion-LD (NGSI-LD)\n\n```\norion-ld:\n    image: quay.io/fiware/orion-ld\n    hostname: orion\n    container_name: fiware-orion\n    depends_on:\n        - mongo-db\n    networks:\n        - default\n    ports:\n        - \"1026:1026\"\n    command: -dbhost mongo-db -logLevel DEBUG\n    healthcheck:\n        test: curl --fail -s http://orion:1026/version || exit 1\n```\n\n#### Orion (NGSI-v2)\n\n```\norion:\n    image: quay.io/fiware/orion\n    hostname: orion2\n    container_name: fiware-orion-v2\n    depends_on:\n        - mongo-for-orion-v2\n    networks:\n        - default\n    ports:\n        - \"1027:1026\" # localhost:1026\n    command: -dbURI mongodb://mongo-db2 -logLevel DEBUG\n    healthcheck:\n        test: curl --fail -s http://orion2:1026/version || exit 1\n```\n\n#### Lepus\n\n```\nlepus:\n    image: quay.io/fiware/lepus\n    hostname: adapter\n    container_name: fiware-lepus\n    networks:\n        - default\n    expose:\n        - \"3005\"\n    ports:\n        - \"3005:3000\"\n    environment:\n        - DEBUG=adapter:*\n        - NGSI_V2_CONTEXT_BROKER=http://orion2:1026\n        - USER_CONTEXT_URL=http://context/fixed-context.jsonld\n        - CORE_CONTEXT_URL=https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context-v1.8.jsonld\n        - NOTIFICATION_RELAY_URL=http://adapter:3000/notify\n```\n\nAll containers are residing on the same network - the Orion-LD Context Broker is listening on Port `1026` and the first\nMongoDB is listening on the default port `27017`. The Orion NGSI-v2 Context Broker is listening on Port `1027` and\nsecond MongoDB is listening on port `27018`. Lepus uses port `3000`, but since that clashes with the tutorial\napplication, it has been amended externally to `3005`.\n\nLepus is driven by the environment variables as shown:\n\n| Key                    | Value                                                              | Description                                                                        |\n| ---------------------- | ------------------------------------------------------------------ | ---------------------------------------------------------------------------------- |\n| DEBUG                  | `adapter:*`                                                        | Debug flag used for logging                                                        |\n| NGSI_V2_CONTEXT_BROKER | `http://orion2:1026`                                               | Hostname and port of the underlying NGSI-v2 context broker                         |\n| USER_CONTEXT_URL       | `http://context/fixed-context.jsonld`                              | The location of the User-defined `@context` file used to define the data models    |\n| CORE_CONTEXT_URL       | `https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context-v1.8.jsonld` | The location of the core `@context` file used to the structure of NGSI-LD entities |\n| NOTIFICATION_RELAY_URL | `http://adapter:3000/notify`                                       | Callback URL used for converting notification payloads from NGSI-v2 to NGSI-LD     |\n\n# Start Up\n\nAll services can be initialised from the command-line by running the\n[services](https://github.com/FIWARE/tutorials.Linked-Data/blob/NGSI-LD/services) Bash script provided within the\nrepository. Please clone the repository and create the necessary images by running the commands as shown:\n\n```\ngit clone https://github.com/FIWARE/tutorials.Linked-Data.git\ncd tutorials.Linked-Data\ngit checkout NGSI-LD\n\n./services orion|scorpio|stellio\n```\n\n>\n> If you want to clean up and start over again you can do so with the following command:\n>\n> ```\n> ./services stop\n> ```\n\n---",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "513743",
		"_collection_link": "https://fiware.postman.co/workspace/NGSI-LD-tutorials~60157bf9-a93f-4c6e-90d1-0917133c1872/collection/513743-16121a01-e085-4afd-8689-fea63a0d7246?action=share&source=collection_link&creator=513743"
	},
	"item": [
		{
			"name": "NGSI-v2 operations",
			"item": [
				{
					"name": "NGSI-v2  - Read Data directly",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{v2-broker}}/v2/entities/urn:ngsi-ld:Store:001",
							"protocol": "http",
							"host": [
								"{{v2-broker}}"
							],
							"path": [
								"v2",
								"entities",
								"urn:ngsi-ld:Store:001"
							]
						},
						"description": "As usual, you can check if NGSI-v2 context broker holding the supermarket data is running by making an HTTP request to the exposed port, the request is in NGSI-v2 format. It does not require a `Link` header for the `@context`\n\nThe response will be in NGSI-v2 format.\n\nThe `type` attribute in NGSI-v2 is loosely defined, but in this case, with the exception of ordinary properties, we are using `type` to correspond to the terms used in NGSI-LD such as `Relationship` or `VocabularyProperty`. For ordinary NGSI-v2 properties, the `type` corresponds to a datatype such as `Text` or `PostalAddress`, each of these datatypes will need to be mapped to a JSON-LD `@context` if the data is to be understood in an NGSI-LD system."
					},
					"response": []
				},
				{
					"name": "Adapter - Read as Linked Data",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Link",
								"value": "<{{ngsi-context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/ld+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://{{adapter}}/ngsi-ld/v1/entities/urn:ngsi-ld:Store:001",
							"protocol": "http",
							"host": [
								"{{adapter}}"
							],
							"path": [
								"ngsi-ld",
								"v1",
								"entities",
								"urn:ngsi-ld:Store:001"
							]
						},
						"description": "To read the data in NGSI-LD format, make an NGSI-LD request via the Lepus adaptor listening on port `` 3005` ``\n\nThe response will be in NGSI-LD format.\n\nIt should be noted that the `@context` supplied in the `Link` header has been totally ignored, and a fixed `@context` used configured for the adaptor has been returned instead. The Adaptor doesn't fully understand NGSI-LD, it merely formats the underlying NGSI-v2 as NGSI-LD. You will notice that the NGSI-v2 `\"type\": \"VocabularyProperty\", \"value\": \"supermarket\"` has been amended to a valid **VocabularyProperty** - `\"type\": \"VocabularyProperty\", \"vocab\": \"supermarket\"`, and similarly the **Relationship** is now using `object` and `objectType` as defined in the core `@context`"
					},
					"response": []
				},
				{
					"name": "NGSI-v2 - Version",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{v2-broker}}/version",
							"protocol": "http",
							"host": [
								"{{v2-broker}}"
							],
							"path": [
								"version"
							]
						},
						"description": "The `/version` endpoint on Orion returns information about the NGSI-v2 context broker."
					},
					"response": []
				},
				{
					"name": "Adapter - Source identity Copy",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Link",
								"value": "<{{ngsi-context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://{{adapter}}/ngsi-ld/v1/info/sourceIdentity",
							"protocol": "http",
							"host": [
								"{{adapter}}"
							],
							"path": [
								"ngsi-ld",
								"v1",
								"info",
								"sourceIdentity"
							]
						},
						"description": "The Lepus adaptor aims to offer all the endpoints of an NGSI-LD context broker, except that it has no understanding of JSON-LD `@context` - hence all terms must always be compacted.\n\nOne of the endpoints defined in the 1.8.1 NGSI-LD specification is `/info/sourceIdentity`, which gives informatation about the underlying context broker - uptime, aliasing and detailed information. In this case the adaptor is merely standardizing the data from the Orion broker's `/version` endpoint:"
					},
					"response": []
				},
				{
					"name": "NGSI-v2 - Query Data directly",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{v2-broker}}/v2/entities/?type=Store",
							"protocol": "http",
							"host": [
								"{{v2-broker}}"
							],
							"path": [
								"v2",
								"entities",
								""
							],
							"query": [
								{
									"key": "type",
									"value": "Store"
								}
							]
						},
						"description": "This request returns all of the `Store` entities found within the NGSI-v2 context broker. The response is in NGSI-v2 format"
					},
					"response": []
				},
				{
					"name": "Adapter - Query as Linked Data",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Prefer",
								"value": "ngsi-ld=1.6",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "http://{{adapter}}/ngsi-ld/v1/entities/?type=Store",
							"protocol": "http",
							"host": [
								"{{adapter}}"
							],
							"path": [
								"ngsi-ld",
								"v1",
								"entities",
								""
							],
							"query": [
								{
									"key": "type",
									"value": "Store"
								}
							]
						},
						"description": "This request  returns all of the `Store` entities found within the NGSI-v2 context broker using the NGSI-LD adapter. The response is in NGSI-LD format."
					},
					"response": []
				},
				{
					"name": "NGSI-LD - Add federation registration",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Link",
								"value": "<{{ngsi-context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"ContextSourceRegistration\",\n    \"information\": [\n        {\n            \"entities\": [\n                {\n                    \"type\": \"Building\"\n                }\n            ]\n        }\n    ],\n    \"contextSourceInfo\": [\n        {\n            \"key\": \"jsonldContext\",\n            \"value\": \"http://context/fixed-context.jsonld\"\n        },\n        {\n            \"key\": \"Prefer\",\n            \"value\": \"ngsi-ld=1.6\"\n        }\n    ],\n    \"mode\": \"inclusive\",\n    \"operations\": [\n        \"federationOps\"\n    ],\n    \"endpoint\": \"http://adapter:3000\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{context-broker}}/ngsi-ld/v1/csourceRegistrations/",
							"protocol": "http",
							"host": [
								"{{context-broker}}"
							],
							"path": [
								"ngsi-ld",
								"v1",
								"csourceRegistrations",
								""
							]
						},
						"description": "This NGSI-LD **ContextSourceRegistration** example informs the NGSI-LD context broker, that data is also available from the adapter.\n\nThe registration is structured as follows:\n\n- `information.entities` is stating that `Building` entities are potentially available on the `endpoint`. The `Link` header holds a JSON-LD `@context` which is mapping the short name `Building` to the IRI `https://uri.fiware.org/ns/dataModels#Building`.\n- The `mode` of the registration is `inclusive`, which means that the context broker will add together `Building` data from all registered and combine it with any `Building` entities found locally.\n- The `operation` mode indicates the `endpoint` is capable of handling subscriptions and retrieval of entities only.\n- The `contextSourceInfo` holds key-value pairs which are used when forwarding requests to the `endpoint`:\n    -  `jsonldContext` is a special key, which is used to apply a JSON-LD compaction operation on the payload before forwarding to the registrant endpoint. This corresponds to the fixed terms used by Lepus itself and ensures that the NGSI-v2 broker behind it is always supplied with its preferred short name terms.\n    -  `Prefer` appends a `Prefer` header to the forwarded request, which ensures that Lepus only returns elements which correspond to the 1.6.1 NGSI-LD specification\n- The `endpoint` holds the location of the adaptor which is in front of the NGSI-v2 context broker"
					},
					"response": []
				},
				{
					"name": "NGSI-LD -Read registration",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Link",
								"value": "<{{ngsi-context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://{{context-broker}}/ngsi-ld/v1/csourceRegistrations/",
							"protocol": "http",
							"host": [
								"{{context-broker}}"
							],
							"path": [
								"ngsi-ld",
								"v1",
								"csourceRegistrations",
								""
							]
						},
						"description": "This request displays data about existing registrations found within the **NGSI-LD** context broker."
					},
					"response": []
				},
				{
					"name": "NGSI-LD - Read as Linked Data",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Link",
								"value": "<{{ngsi-context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://{{context-broker}}/ngsi-ld/v1/entities/urn:ngsi-ld:Store:001",
							"protocol": "http",
							"host": [
								"{{context-broker}}"
							],
							"path": [
								"ngsi-ld",
								"v1",
								"entities",
								"urn:ngsi-ld:Store:001"
							]
						},
						"description": "Once a registration is in place, it is possible to read information about the NGSI-v2 Stores by querying the **NGSI-LD** FMIS system.\n\nBecause of `Prefer: ngsi-ld=1.6` had been set in the registration, the retrieved entity does not a **VocabularyProperty** and `objectType` has been quietly dropped from the response. This ensures backwards compatibility to context brokers conformant to an earlier version of the NGSI-LD specification - in this case version 1.6.\n"
					},
					"response": []
				},
				{
					"name": "NGSI-LD - Read as Linked Data Copy",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Link",
								"value": "<{{ngsi-context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://{{context-broker}}/ngsi-ld/v1/entities/urn:ngsi-ld:Store:001",
							"protocol": "http",
							"host": [
								"{{context-broker}}"
							],
							"path": [
								"ngsi-ld",
								"v1",
								"entities",
								"urn:ngsi-ld:Store:001"
							]
						},
						"description": "This example returns all known `Building` entities in the \"Supermarket\" `category`\n\nThe response returns all **Building** entities known locally, and all **Building** entities found on registered context brokers which match the query."
					},
					"response": []
				},
				{
					"name": "NGSI-LD - Read as Linked Data - alternate context",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Link",
								"value": "<{{alternate-context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://{{context-broker}}/ngsi-ld/v1/entities/urn:ngsi-ld:Store:001",
							"protocol": "http",
							"host": [
								"{{context-broker}}"
							],
							"path": [
								"ngsi-ld",
								"v1",
								"entities",
								"urn:ngsi-ld:Store:001"
							]
						},
						"description": "\nNeither Lepus nor the NGSI-v2 context broker able to handle alternative `@context` files, however, when requesting data from the NGSI-LD context broker, JSON-LD is fully supported, so a response can be returned using the preferred short names of the user agent.\n\nIn the example below, the **Building** entity `urn:ngsi-ld:Store:001` is requested using terms in German.\n\nThe response is returned in JSON format with short form attribute names in German. The true source of the entity (NGSI-v2 data via the adapter) is not visible to the end user."
					},
					"response": []
				}
			]
		},
		{
			"name": "Create Operations",
			"item": [
				{
					"name": "Create a New Data Entity",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Link",
								"value": "<{{ngsi-context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n      \"id\": \"urn:ngsi-ld:TemperatureSensor:001\",\n      \"type\": \"TemperatureSensor\",\n      \"category\": {\n            \"type\": \"Property\",\n            \"value\": \"sensor\"\n      },\n      \"temperature\": {\n            \"type\": \"Property\",\n            \"value\": 25,\n            \"unitCode\": \"CEL\"\n      }\n}"
						},
						"url": {
							"raw": "http://{{adapter}}/ngsi-ld/v1/entities",
							"protocol": "http",
							"host": [
								"{{adapter}}"
							],
							"path": [
								"ngsi-ld",
								"v1",
								"entities"
							]
						},
						"description": "This example adds a new **TemperatureSensor** entity to the context.\n\nNew entities can be added by making a POST request to the `/ngsi-ld/v1/entities` endpoint.\n\nThe request will fail if the entity already exists in the context."
					},
					"response": []
				},
				{
					"name": "Create a New Attribute",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Link",
								"value": "<{{ngsi-context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n       \"batteryLevel\": {\n            \"type\": \"Property\",\n            \"value\": 0.8,\n            \"unitCode\": \"C62\"\n      },\n      \"controlledAsset\": {\n            \"type\": \"Relationship\",\n            \"object\": \"urn:ngsi-ld:Building:barn002\"\n      }\n}"
						},
						"url": {
							"raw": "http://{{adapter}}/ngsi-ld/v1/entities/urn:ngsi-ld:TemperatureSensor:001/attrs",
							"protocol": "http",
							"host": [
								"{{adapter}}"
							],
							"path": [
								"ngsi-ld",
								"v1",
								"entities",
								"urn:ngsi-ld:TemperatureSensor:001",
								"attrs"
							]
						},
						"description": "This example adds a new `batteryLevel` Property and a `controlledAsset` Relationship to the existing\n**TemperatureSensor** entity with `id=urn:ngsi-ld:TemperatureSensor:001`.\n\nNew attributes can be added by making a POST request to the `/ngsi-ld/v1/entities/<entity>/attrs` endpoint.\n\nThe payload should consist of a JSON object holding the attribute names and values as shown.\n\nAll `type=Property` attributes must have a `value` associated with them. All `type=Relationship` attributes must have an\n`object` associated with them which holds the URN of another entity. Well-defined common metadata elements such as\n`unitCode` can be provided as strings, all other metadata should be passed as a JSON object with its own `type` and\n`value` attributes\n\nSubsequent requests using the same `id` will update the value of the attribute in the context."
					},
					"response": []
				},
				{
					"name": "Batch Create New Data Entities or Attributes",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Link",
								"value": "<{{ngsi-context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/ld+json",
								"name": "Accept",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n      \"id\": \"urn:ngsi-ld:TemperatureSensor:002\",\n      \"type\": \"TemperatureSensor\",\n      \"category\": {\n            \"type\": \"Property\",\n            \"value\": \"sensor\"\n      },\n      \"temperature\": {\n            \"type\": \"Property\",\n            \"value\": 20,\n            \"unitCode\": \"CEL\"\n      }\n    },\n    {\n      \"id\": \"urn:ngsi-ld:TemperatureSensor:003\",\n      \"type\": \"TemperatureSensor\",\n      \"category\": {\n            \"type\": \"Property\",\n            \"value\": \"sensor\"\n      },\n      \"temperature\": {\n            \"type\": \"Property\",\n            \"value\": 2,\n            \"unitCode\": \"CEL\"\n      }\n    },\n     {\n      \"id\": \"urn:ngsi-ld:TemperatureSensor:004\",\n      \"type\": \"TemperatureSensor\",\n      \"category\": {\n            \"type\": \"Property\",\n            \"value\": \"sensor\"\n      },\n      \"temperature\": {\n            \"type\": \"Property\",\n            \"value\": 100,\n            \"unitCode\": \"CEL\"\n      }\n    }\n]"
						},
						"url": {
							"raw": "http://{{adapter}}/ngsi-ld/v1/entityOperations/create",
							"protocol": "http",
							"host": [
								"{{adapter}}"
							],
							"path": [
								"ngsi-ld",
								"v1",
								"entityOperations",
								"create"
							]
						},
						"description": "This example uses the convenience batch processing endpoint to add three new **TemperatureSensor** entities to the\ncontext. Batch create uses the `/ngsi-ld/v1/entityOperations/create` endpoint.\n\nThe request will fail if any of the attributes already exist in the context. The response highlights which actions have\nbeen successful and the reason for failure (if any has occurred)."
					},
					"response": []
				},
				{
					"name": "Batch Create/Overwrite New Data Entities",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Link",
								"value": "<{{ngsi-context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/ld+json",
								"name": "Accept",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n    {\n      \"id\": \"urn:ngsi-ld:TemperatureSensor:002\",\n      \"type\": \"TemperatureSensor\",\n      \"category\": {\n            \"type\": \"Property\",\n            \"value\": \"sensor\"\n      },\n      \"temperature\": {\n            \"type\": \"Property\",\n            \"value\": 21,\n            \"unitCode\": \"CEL\"\n      }\n    },\n    {\n      \"id\": \"urn:ngsi-ld:TemperatureSensor:003\",\n      \"type\": \"TemperatureSensor\",\n      \"category\": {\n            \"type\": \"Property\",\n            \"value\": \"sensor\"\n      },\n      \"temperature\": {\n            \"type\": \"Property\",\n            \"value\": 27,\n            \"unitCode\": \"CEL\"\n      }\n    }\n]"
						},
						"url": {
							"raw": "http://{{adapter}}/ngsi-ld/v1/entityOperations/upsert",
							"protocol": "http",
							"host": [
								"{{adapter}}"
							],
							"path": [
								"ngsi-ld",
								"v1",
								"entityOperations",
								"upsert"
							]
						},
						"description": "This example uses the convenience batch processing endpoint to add or amend two **TemperatureSensor** entities in the\ncontext.\n\n-   if an entity already exists, the request will update that entity's attributes.\n-   if an entity does not exist, a new entity will be created.\n\nBatch processing for create/overwrite uses the `/ngsi-ld/v1/entityOperations/upsert` endpoint.\n\nA subsequent request containing the same data (i.e. same entities and `actionType=append`) will also succeed won't\nchange the context state. The `modifiedAt` metadata will be amended however."
					},
					"response": []
				}
			],
			"description": "Create Operations map to HTTP POST.\n\n-   The `/ngsi-ld/v1/entities` endpoint is used for creating new entities\n-   The `/ngsi-ld/v1/entities/<entity-id>/attrs` endpoint is used for adding new attributes\n\nAny newly created entity must have `id` and `type` attributes and a valid `@context` definition. All other attributes\nare optional and will depend on the system being modelled. If additional attributes are present though, each should\nspecify both a `type` and a `value`.\n\nThe response will be **201 - Created** if the operation is successful or **409 - Conflict** if the operation fails.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Read Operations",
			"item": [
				{
					"name": "Read a Data Entity (verbose)",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Link",
								"value": "<{{ngsi-context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://{{adapter}}/ngsi-ld/v1/entities/urn:ngsi-ld:TemperatureSensor:001?options=sysAttrs",
							"protocol": "http",
							"host": [
								"{{adapter}}"
							],
							"path": [
								"ngsi-ld",
								"v1",
								"entities",
								"urn:ngsi-ld:TemperatureSensor:001"
							],
							"query": [
								{
									"key": "options",
									"value": "sysAttrs"
								}
							]
						},
						"description": "This example reads the full context from an existing **TemperatureSensor** entity with a known `id`.\n\nTemperatureSensor `urn:ngsi-ld:TemperatureSensor:001` is returned as _normalized_ NGSI-LD. Additional metadata is\nreturned because `options=sysAttrs`. By default the `@context` is returned in the payload body (although this could be\nmoved due to content negotiation if the `Accept:application/json` had been set.\n\nIndividual context data entities can be retrieved by making a GET request to the `/ngsi-ld/v1/entities/<entity>`\nendpoint."
					},
					"response": []
				},
				{
					"name": "Read an Attribute from a Data Entity",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Link",
								"value": "<{{ngsi-context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://{{adapter}}/ngsi-ld/v1/entities/urn:ngsi-ld:TemperatureSensor:001?attrs=temperature",
							"protocol": "http",
							"host": [
								"{{adapter}}"
							],
							"path": [
								"ngsi-ld",
								"v1",
								"entities",
								"urn:ngsi-ld:TemperatureSensor:001"
							],
							"query": [
								{
									"key": "attrs",
									"value": "temperature"
								}
							]
						},
						"description": "This example reads the value of a single attribute (`temperature`) from an existing **TemperatureSensor** entity with a\nknown `id`.\n\nThe sensor `urn:ngsi-ld:TemperatureSensor:001` is reading at 25°C.\n\nBecause `options=keyValues` was not used this is the normalized response including the metadata such as `unitCode`.\nContext data can be retrieved by making a GET request to the `/ngsi-ld/v1/entities/<entity-id>` endpoint and selecting\nthe `attrs` using a comma separated list.\n"
					},
					"response": []
				},
				{
					"name": "Read a Data Entity (key value pairs)",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Link",
								"value": "<{{json-context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"name": "Accept",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://{{adapter}}/ngsi-ld/v1/entities/urn:ngsi-ld:TemperatureSensor:001/?options=keyValues",
							"protocol": "http",
							"host": [
								"{{adapter}}"
							],
							"path": [
								"ngsi-ld",
								"v1",
								"entities",
								"urn:ngsi-ld:TemperatureSensor:001",
								""
							],
							"query": [
								{
									"key": "options",
									"value": "keyValues",
									"description": "* `keyValues` option in order to get a more compact and brief representation, including just attribute values\n* `values` option combined with a list of attribute values  `attrs`  for an ordered list of attributes only\n"
								}
							]
						},
						"description": "This example reads the key-value pairs  from the context of an existing **TemperatureSensor** entities with a known `id`.\n\nThe response contains an unfiltered list of context data from an entity containing all of the attributes of the\n`urn:ngsi-ld:TemperatureSensor:001`. The payload body does not contain an `@context` attribute since the\n`Accept: application/json` was set.\n\nCombine the `options=keyValues` parameter with the `attrs` parameter to retrieve a limited set of key-value pairs."
					},
					"response": []
				},
				{
					"name": "Read Multiple attributes values from a Data Entity",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Link",
								"value": "<{{json-context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"name": "Accept",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://{{adapter}}/ngsi-ld/v1/entities/urn:ngsi-ld:TemperatureSensor:001/?options=keyValues&attrs=category,temperature",
							"protocol": "http",
							"host": [
								"{{adapter}}"
							],
							"path": [
								"ngsi-ld",
								"v1",
								"entities",
								"urn:ngsi-ld:TemperatureSensor:001",
								""
							],
							"query": [
								{
									"key": "options",
									"value": "keyValues",
									"description": "* `keyValues` option in order to get a more compact and brief representation, including just attribute values\n* `values` option combined with a list of attribute values  `attrs`  for an ordered list of attributes only"
								},
								{
									"key": "attrs",
									"value": "category,temperature",
									"description": "Ordered list of attribute names to display"
								}
							]
						},
						"description": "\nThis example reads the value of two attributes (`category` and `temperature`) from the context of an existing\n**TemperatureSensor** entity with a known ID.\n\nCombine the `options=keyValues` parameter and the `attrs` parameter to return a list of values."
					},
					"response": []
				},
				{
					"name": "List all Data Entities (verbose)",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Link",
								"value": "<{{ngsi-context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/ld+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://{{adapter}}/ngsi-ld/v1/entities/?type=TemperatureSensor",
							"protocol": "http",
							"host": [
								"{{adapter}}"
							],
							"path": [
								"ngsi-ld",
								"v1",
								"entities",
								""
							],
							"query": [
								{
									"key": "type",
									"value": "TemperatureSensor"
								}
							]
						},
						"description": "This example lists the full context of all **TemperatureSensor** entities.\n\nOn start-up the context was empty, four **TemperatureSensor** entities have been added by create operations so the full\ncontext will now contain four sensors.\n"
					},
					"response": []
				},
				{
					"name": "List all Data Entities (key value pairs)",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Link",
								"value": "<{{json-context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"name": "Accept",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://{{adapter}}/ngsi-ld/v1/entities/?type=TemperatureSensor&options=keyValues&attrs=temperature",
							"protocol": "http",
							"host": [
								"{{adapter}}"
							],
							"path": [
								"ngsi-ld",
								"v1",
								"entities",
								""
							],
							"query": [
								{
									"key": "type",
									"value": "TemperatureSensor",
									"description": "Entity type"
								},
								{
									"key": "options",
									"value": "keyValues"
								},
								{
									"key": "attrs",
									"value": "temperature"
								}
							]
						},
						"description": "This example lists the `temperature` attribute of all **TemperatureSensor** entities.\n\nThe full context contains four sensors, they are returned in a random order.\n\nFull context data for a specified entity type can be retrieved by making a GET request to the `/ngsi-ld/v1/entities/` endpoint\nand supplying the `type` parameter, combine this with the `options=keyValues` parameter and the `attrs` parameter to\nretrieve key-values."
					},
					"response": []
				},
				{
					"name": "NGSI-v2 - List all Data Entities",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Link",
								"value": "<{{json-context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"name": "Accept",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://{{adapter}}/ngsi-ld/v1/entities/?type=TemperatureSensor&options=keyValues&attrs=temperature",
							"protocol": "http",
							"host": [
								"{{adapter}}"
							],
							"path": [
								"ngsi-ld",
								"v1",
								"entities",
								""
							],
							"query": [
								{
									"key": "type",
									"value": "TemperatureSensor",
									"description": "Entity type"
								},
								{
									"key": "options",
									"value": "keyValues"
								},
								{
									"key": "attrs",
									"value": "temperature"
								}
							]
						},
						"description": "This example lists the `temperature` attribute of all **TemperatureSensor** entities.\n\nThe full context contains four sensors, they are returned in a random order.\n\nFull context data for a specified entity type can be retrieved by making a GET request to the `/ngsi-ld/v1/entities/` endpoint\nand supplying the `type` parameter, combine this with the `options=keyValues` parameter and the `attrs` parameter to\nretrieve key-values."
					},
					"response": []
				},
				{
					"name": "List Data Entity by id",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Link",
								"value": "<{{json-context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"name": "Accept",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://{{adapter}}/ngsi-ld/v1/entities/?id=urn:ngsi-ld:TemperatureSensor:001,urn:ngsi-ld:TemperatureSensor:002&options=keyValues&attrs=temperature",
							"protocol": "http",
							"host": [
								"{{adapter}}"
							],
							"path": [
								"ngsi-ld",
								"v1",
								"entities",
								""
							],
							"query": [
								{
									"key": "id",
									"value": "urn:ngsi-ld:TemperatureSensor:001,urn:ngsi-ld:TemperatureSensor:002"
								},
								{
									"key": "options",
									"value": "keyValues"
								},
								{
									"key": "attrs",
									"value": "temperature"
								}
							]
						},
						"description": "This example lists selected data from two **TemperatureSensor** entities chosen by `id`. Note that every `id` must be\nunique, so `type` is not required for this request. To filter by `id` add the entries in a comma delimted list.\n\nThe response details the selected attributes from the selected entities."
					},
					"response": []
				}
			],
			"description": "-   The `/ngsi-ld/v1/entities` endpoint is used for listing entities\n-   The `/ngsi-ld/v1/entities/<entity>` endpoint is used for retrieving the details of a single entity.\n\nFor read operations the `@context` must be supplied in a `Link` header.\n\n#### Filtering\n\n-   The `options` parameter (combined with the `attrs` parameter) can be used to filter the returned fields\n-   The `q` parameter can be used to filter the returned entities",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Update Operations",
			"item": [
				{
					"name": "Overwrite the value of an Attribute value",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Link",
								"value": "<{{ngsi-context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"value\": [\"sensor\", \"actuator\"],\n    \"type\": \"Property\"\n}"
						},
						"url": {
							"raw": "http://{{context-broker}}/ngsi-ld/v1/entities/urn:ngsi-ld:TemperatureSensor:001/attrs/category",
							"protocol": "http",
							"host": [
								"{{context-broker}}"
							],
							"path": [
								"ngsi-ld",
								"v1",
								"entities",
								"urn:ngsi-ld:TemperatureSensor:001",
								"attrs",
								"category"
							]
						},
						"description": "This example updates the value of the `category` attribute of the Entity with `id=urn:ngsi-ld:TemperatureSensor:001`\n\nExisting attribute values can be altered by making a PATCH request to the\n`/ngsi-ld/v1/entities/<entity-id>/attrs/<attribute>` endpoint. The appropriate `@context` should be supplied as a `Link`\nheader."
					},
					"response": []
				},
				{
					"name": "Overwrite Multiple Attributes of a Data Entity",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Link",
								"value": "<{{ngsi-context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n      \"category\": {\n            \"value\": [\n                  \"sensor\",\n                  \"actuator\"\n            ],\n            \"type\": \"Property\"\n      },\n      \"controlledAsset\": {\n            \"type\": \"Relationship\",\n            \"object\": \"urn:ngsi-ld:Building:barn001\"\n      }\n}"
						},
						"url": {
							"raw": "http://{{context-broker}}/ngsi-ld/v1/entities/urn:ngsi-ld:TemperatureSensor:001/attrs",
							"protocol": "http",
							"host": [
								"{{context-broker}}"
							],
							"path": [
								"ngsi-ld",
								"v1",
								"entities",
								"urn:ngsi-ld:TemperatureSensor:001",
								"attrs"
							]
						},
						"description": "This example simultaneously updates the values of both the `category` and `controlledAsset` attributes of the Entity\nwith `id=urn:ngsi-ld:TemperatureSensor:001`.\n\n"
					},
					"response": []
				},
				{
					"name": "Batch Update Attributes of Multiple Data Entities",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Link",
								"value": "<{{ngsi-context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n  {\n    \"id\": \"urn:ngsi-ld:TemperatureSensor:003\",\n    \"type\": \"TemperatureSensor\",\n    \"category\": {\n      \"type\": \"Property\",\n      \"value\": [\n        \"actuator\",\n        \"sensor\"\n      ]\n    }\n  },\n  {\n    \"id\": \"urn:ngsi-ld:TemperatureSensor:004\",\n    \"type\": \"TemperatureSensor\",\n    \"category\": {\n      \"type\": \"Property\",\n      \"value\": [\n        \"actuator\",\n        \"sensor\"\n      ]\n    }\n  }\n]"
						},
						"url": {
							"raw": "http://{{context-broker}}/ngsi-ld/v1/entityOperations/upsert?options=update",
							"protocol": "http",
							"host": [
								"{{context-broker}}"
							],
							"path": [
								"ngsi-ld",
								"v1",
								"entityOperations",
								"upsert"
							],
							"query": [
								{
									"key": "options",
									"value": "update"
								}
							]
						},
						"description": "This example uses the convenience batch processing endpoint to update existing sensors.\n\nBatch processing uses the `/ngsi-ld/v1/entityOperations/upsert` endpoint. The payload body holds an array of the\nentities and attributes we wish to update.The `options=update` parameter indicates we will not remove existing\nattributes if they already exist and have not been included in the payload.\n\nAn alternative would be to use the `/ngsi-ld/v1/entityOperations/update` endpoint. Unlike `upsert`, the `update`\noperation will not silently create any new entities - it fails if the entities do not already exist."
					},
					"response": []
				},
				{
					"name": "Batch Replace Entity Data",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Link",
								"value": "<{{ngsi-context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n  {\n    \"id\": \"urn:ngsi-ld:TemperatureSensor:003\",\n    \"type\": \"TemperatureSensor\",\n    \"category\": {\n      \"type\": \"Property\",\n      \"value\": [\n        \"actuator\",\n        \"sensor\"\n      ]\n    }\n  },\n  {\n    \"id\": \"urn:ngsi-ld:TemperatureSensor:004\",\n    \"type\": \"TemperatureSensor\",\n    \"temperature\": {\n      \"type\": \"Property\",\n      \"value\": [\n        \"actuator\",\n        \"sensor\"\n      ]\n    }\n  }\n]"
						},
						"url": {
							"raw": "http://{{adapter}}/ngsi-ld/v1/entityOperations/update?options=replace",
							"protocol": "http",
							"host": [
								"{{adapter}}"
							],
							"path": [
								"ngsi-ld",
								"v1",
								"entityOperations",
								"update"
							],
							"query": [
								{
									"key": "options",
									"value": "replace"
								}
							]
						},
						"description": "This example uses the convenience batch processing endpoint to replace entity data of existing sensors.\n\nBatch processing uses the `/ngsi-ld/v1/entityOperations/update` endpoint with a payload with the - `options=replace`\nparameter, this means we will overwrite existing entities. `/ngsi-ld/v1/entityOperations/upsert` could also be used if\nnew entities are also to be created."
					},
					"response": []
				}
			],
			"description": "Overwrite operations are mapped to HTTP PATCH:\n\n-   The `/ngsi-ld/v1/entities/<entity-id>/attrs/<attribute>` endpoint is used to update an attribute\n-   The `/ngsi-ld/v1/entities/<entity-id>/attrs` endpoint is used to update multiple attributes\n",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Delete Operations",
			"item": [
				{
					"name": "Delete a Data Entity",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://{{adapter}}/ngsi-ld/v1/entities/urn:ngsi-ld:TemperatureSensor:004",
							"protocol": "http",
							"host": [
								"{{adapter}}"
							],
							"path": [
								"ngsi-ld",
								"v1",
								"entities",
								"urn:ngsi-ld:TemperatureSensor:004"
							]
						},
						"description": "This example deletes the entity with `id=urn:ngsi-ld:TemperatureSensor:004` from the context.\n\nEntities can be deleted by making a DELETE request to the `/ngsi-ld/v1/entities/<entity>` endpoint.\n\nSubsequent requests using the same `id` will result in an error response since the entity no longer exists in the\ncontext."
					},
					"response": []
				},
				{
					"name": "Delete an Attribute from a Data Entity",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Link",
								"value": "<{{ngsi-context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://{{adapter}}/ngsi-ld/v1/entities/urn:ngsi-ld:TemperatureSensor:001/attrs/batteryLevel",
							"protocol": "http",
							"host": [
								"{{adapter}}"
							],
							"path": [
								"ngsi-ld",
								"v1",
								"entities",
								"urn:ngsi-ld:TemperatureSensor:001",
								"attrs",
								"batteryLevel"
							]
						},
						"description": "This example removes the `batteryLevel` attribute from the entity with `id=urn:ngsi-ld:TemperatureSensor:001`.\n\nAttributes can be deleted by making a DELETE request to the `/ngsi-ld/v1/entities/<entity>/attrs/<attribute>` endpoint. It is\nimportant to supply the appropriate `@context` in the request in the form of a `Link` header to ensure that the\nattribute name can be recognised.\n\nIf the entity does not exist within the context or the attribute cannot be found on the entity, the result will be an\nerror response."
					},
					"response": []
				},
				{
					"name": "Batch Delete Multiple Data Entities",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n  \"urn:ngsi-ld:TemperatureSensor:002\",\n  \"urn:ngsi-ld:TemperatureSensor:003\"\n]"
						},
						"url": {
							"raw": "http://{{adapter}}/ngsi-ld/v1/entityOperations/delete",
							"protocol": "http",
							"host": [
								"{{adapter}}"
							],
							"path": [
								"ngsi-ld",
								"v1",
								"entityOperations",
								"delete"
							]
						},
						"description": "This example uses the convenience batch processing endpoint to delete some **TemperatureSensor** entities.\n\nBatch processing uses the `/ngsi-ld/v1/entityOperations/delete` endpoint with a payload consisting of an array of\nelements to delete.\n\nIf an entity does not exist in the context, the result will be an error response."
					},
					"response": []
				},
				{
					"name": "Delete Multiple Attributes of a Data Entity",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Link",
								"value": "<{{ngsi-context.jsonld}}>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n      \"category\": {\n            \"value\": null,\n            \"type\": \"Property\"\n      },\n      \"controlledAsset\": {\n            \"type\": \"Relationship\",\n            \"object\": null\n      }\n}"
						},
						"url": {
							"raw": "http://{{adapter}}/ngsi-ld/v1/entities/urn:ngsi-ld:TemperatureSensor:001/attrs",
							"protocol": "http",
							"host": [
								"{{adapter}}"
							],
							"path": [
								"ngsi-ld",
								"v1",
								"entities",
								"urn:ngsi-ld:TemperatureSensor:001",
								"attrs"
							]
						},
						"description": "This example uses the PATCH `/ngsi-ld/v1/entities/<entity-id>/attrs` endpoint to delete some attributes from a\n**TemperatureSensor** entity.\n\nIf a value is set to `null` the attribute is deleted."
					},
					"response": []
				}
			],
			"description": "Delete Operations map to HTTP DELETE.\n\n-   The `/ngsi-ld/v1/entities/<entity-id>` endpoint can be used to delete an entity\n-   The `/ngsi-ld/v1/entities/<entity-id>/attrs/<attribute>` endpoint can be used to delete an attribute\n\nThe response will be **204 - No Content** if the operation is successful or **404 - Not Found** if the operation fails.\n\n### Data Relationships\n\nIf there are entities within the context which relate to one another, you must be careful when deleting an entity. You\nwill need to check that no references are left dangling once the entity has been deleted.\n\nOrganizing a cascade of deletions is beyond the scope of this tutorial, but it would be possible using a batch delete\nrequest.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "NGSI-v2  - Read Data directly Copy",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{v2-broker}}/v2/entities/urn:ngsi-ld:Store:001",
					"protocol": "http",
					"host": [
						"{{v2-broker}}"
					],
					"path": [
						"v2",
						"entities",
						"urn:ngsi-ld:Store:001"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "context-broker",
			"value": "localhost:1026",
			"type": "string"
		},
		{
			"key": "ngsi-context.jsonld",
			"value": "http://context/ngsi-context.jsonld",
			"type": "string"
		},
		{
			"key": "alternate-context.jsonld",
			"value": "http://context/alternate-context.jsonld",
			"type": "string"
		},
		{
			"key": "json-context.jsonld",
			"value": "http://context/json-context.jsonld",
			"type": "string"
		},
		{
			"key": "v2-broker",
			"value": "localhost:1027",
			"type": "string"
		},
		{
			"key": "adapter",
			"value": "localhost:3005",
			"type": "string"
		}
	]
}