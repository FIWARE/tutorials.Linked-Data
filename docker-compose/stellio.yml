# WARNING: Do not deploy this tutorial configuration directly to a production environment
#
# The tutorial docker-compose files have not been written for production deployment and will not 
# scale. A proper architecture has been sacrificed to keep the narrative focused on the learning 
# goals, they are just used to deploy everything onto a single Docker machine. All FIWARE components 
# are running at full debug and extra ports have been exposed to allow for direct calls to services. 
# They also contain various obvious security flaws - passwords in plain text, no load balancing,
# no use of HTTPS and so on. 
# 
# This is all to avoid the need of multiple machines, generating certificates, encrypting secrets
# and so on, purely so that a single docker-compose file can be read as an example to build on, 
# not use directly. 
# 
# When deploying to a production environment, please refer to the Helm Repository
# for FIWARE Components in order to scale up to a proper architecture:
# 
# see: https://github.com/FIWARE/helm-charts/
#
version: '3.9'
services:
  api-gateway:
    container_name: stellio-api-gateway
    hostname: stellio
    labels:
      org.fiware: 'tutorial'
    image: stellio/stellio-api-gateway:${STELLIO_DOCKER_TAG}
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    ports:
      - "${STELLIO_PORT}:8080"
    networks:
      - default

  entity-service:
    restart: always
    container_name: stellio-entity-service
    labels:
      org.fiware: 'tutorial'
    image: stellio/stellio-entity-service:${STELLIO_DOCKER_TAG}
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - APPLICATION_AUTHENTICATION_ENABLED=false
    ports:
      - 8082:8082
    networks:
      - default
    depends_on:
      neo4j:
        condition: service_healthy
      kafka:
        condition: service_started

  search-service:
    container_name: stellio-search-service
    labels:
      org.fiware: 'tutorial'
    image: stellio/stellio-search-service:${STELLIO_DOCKER_TAG}
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_R2DBC_URL=r2dbc:postgresql://postgres/stellio_search
      - SPRING_FLYWAY_URL=jdbc:postgresql://postgres/stellio_search
      - SPRING_R2DBC_USERNAME=stellio_search
      - SPRING_R2DBC_PASSWORD=stellio_search_db_password
      - APPLICATION_AUTHENTICATION_ENABLED=false
    ports:
      - 8083:8083
    networks:
      - default
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_started

  subscription-service:
    container_name: stellio-subscription-service
    labels:
      org.fiware: 'tutorial'
    image: stellio/stellio-subscription-service:${STELLIO_DOCKER_TAG}
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_R2DBC_URL=r2dbc:postgresql://postgres/stellio_subscription
      - SPRING_FLYWAY_URL=jdbc:postgresql://postgres/stellio_subscription
      - SPRING_R2DBC_USERNAME=stellio_subscription
      - SPRING_R2DBC_PASSWORD=stellio_subscription_db_password
      - APPLICATION_AUTHENTICATION_ENABLED=false
    ports:
      - 8085:8084
    networks:
      - default
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_started

  zookeeper:
    labels:
      org.fiware: 'tutorial'
    image: confluentinc/cp-zookeeper:5.5.7
    container_name: zookeeper
    ports:
      - 2181:2181
    networks:
      - default
    restart: always
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    labels:
      org.fiware: 'tutorial'
    image: confluentinc/cp-kafka:5.5.7
    container_name: kafka
    ports:
      - 29092:29092
    networks:
      - default
    restart: always
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:9092,EXTERNAL://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_ROOT_LOGLEVEL: INFO
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper



  # Databases
  neo4j:
    labels:
      org.fiware: 'tutorial'
    image: neo4j:4.4
    hostname: neo4j
    container_name: db-neo4j
    volumes:
      - neo4j-db:/data
    environment:
      - NEO4J_dbms_default__database=stellio
      - NEO4J_AUTH=none
      - "NEO4J_dbms_security_procedures_unrestricted=apoc.*"
      - "NEO4J_dbms_security_procedures_allowlist=apoc.*"
      - NEO4JLABS_PLUGINS=["apoc"]
    ports:
      - 7474:7474
      - 7687:7687
    networks:
      - default
    # following https://github.com/neo4j/neo4j/issues/7203#issuecomment-898511474
    healthcheck:
      test: wget -qO- http://localhost:7474 || exit 1
      interval: 1s
      timeout: 10s
      retries: 20
      start_period: 3s

  postgres:
    labels:
      org.fiware: 'tutorial'
    image: stellio/stellio-timescale-postgis:2.3.0-pg13
    hostname: postgres
    container_name: db-postgres
    environment:
      - POSTGRES_PASSWORD=password
      - "POSTGRES_MULTIPLE_DATABASES=stellio_search,stellio_search,stellio_search_db_password: stellio_subscription,stellio_subscription,stellio_subscription_db_password"
      - PGDATA=/var/lib/postgresql/data/pgdata
    ports:
      - 5432:5432
    networks:
      - default
    volumes:
      - postgres-db:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 20
      start_period: 10s

networks:
  default:
    labels:
      org.fiware: 'tutorial'

volumes:
  neo4j-db: ~
  postgres-db: ~
